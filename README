bgpfeeder by Matthew Bloch <matthew@bytemark.co.uk>
---------------------------------------------------

See http://src.bytemark.co.uk/trac/bgpfeeder for later versions

bgpfeeder is a program to feed a BGPv4 speaker with an infrequently changing
list of static internal routes.  We intend to use it at Bytemark to
rearrange routing information from our "network organiser" database, to
avoid staff having to log in to core routers to effect common routing
changes.

It is configured with a set of static parameters on the command line which
cannot be changed once started.  These are your routers' AS number, BGP
identifier (assumed to be the local IP) and the hold time in seconds (would
recommend 60s).  The administrator also specifies filenames of two database
files: the peers file, and the routes file.  These  are the two lists which
can change while the program is running.

The peers file contains a list of IP addresses of BGPv4 peers.  When a new
peer is seen for the first time, the program continually tries to connect to
it and send its current complete route list.  When a peer is removed from
the list the BGP connection is terminated.  Peers are IPv4 addresses, and
can have a port specifier i.e. either "80.68.80.1" or "127.0.0.1:1234".  The
latter can be useful for testing (though no real BGP speaker will listen on
a port other than the default 179).

The routes file contains a list of static routes with "next hop" specifiers. 
These can either be in roughly "Linux" or "Cisco" formats; e.g. any of these
means the same thing:

10.0.0.0/24 192.168.0.1
10.0.0.0/24 via 192.168.0.1
10.0.0.0 255.255.255.0 192.168.0.1
ip route 10.0.0.0 255.255.255.0 192.168.0.1

i.e. routing the IP block 10.0.0.0/24 via the next hop of 192.168.0.1

As well as the obvious NEXT_HOP attribute (3), the BGP UPDATE messages sent
by bgpfeeder contain an ORIGIN setting indicating that these have been
learned by an IGP, a zero-length AS path, a a local preference of 100.

The routes file is checked for differences whenever it is changed and UPDATE
messages sent to current peers accordingly.  When routes are removed, the
message puts the route into the 'withdrawn' section.  When routes are
replaced, the same UPDATE message contains both the withdrawn route and the
new new one so the peer can update its database without a "flap" (i.e.
removing the route and adding it again).

The peers file is checked for differences whenever it is changed; new peers
are started within a second.  Old peers are signalled to close straight away
but may take a few seconds to close down properly.

Limitations
-----------

There should be no limits on the size of the routes and peers files other
than what the system imposes.  The routes file is re-read and parsed in its
entirety when it is changed, so updates may be slower to get into the BGP
network the larger the file is.  However this is by design; the program is
not intended to server very frequenty changing routes (i.e. more than about
once per minute).

bgpfeeder is not a "proper" BGPv4 daemon in that it doesn't listen on port
179 for incoming connections, and discards any UPDATE messages from its
peers.  Its state machine bears no relation to the complicated one described
in RFC 1771.  None of this should affect it doing its job.

Received UPDATE messages generate a warning as the system is written in a
scripting language which is relatively slow to handle large amounts of data. 
If a peer is bombarding it with an entire internet routing table when it
starts up, it will take a lot of CPU time to discard such information
relative to a normal BGP program.

Bugs
----
"Expected OPEN, got  instead" log message - peers don't open first time,
should work again after retry 20s later.

Deployment example
------------------

If you were running the program on the IP 80.68.80.1, you might use a script
like this:

cd /home/bgpfeeder
./bgpfeeder 65534 80.68.80.1 60 ./routes ./peers

The program does not daemonise itself - an example init script is provided
as bgpfeeder.init.d or you can make your own arrangements.

You can set the environment variable BGPFEEDER_LOG_LEVEL to one of DEBUG,
INFO, WARN or ERROR to make the logging more or less verbose.  The default
is WARN.

It is important that the routes and peers files are updated *atomically*, i.e.

* DO use rsync if you are copying the peers & routes file on remotely
* DO write to (for instance) peers.tmp and then "mv peers.tmp peers"
* DON'T edit the peers or routes file directory with vi, or scribble to them
  with "echo 1.2.3.4 >>peers"

If you don't follow this advice you may find routes or peers flapping
unpredictably, as bgpfeeder won't care if your file is only half written.

TODO: show IOS/quagga configuration examples for peers to make sure routes
aren't sent back.

Copyright
---------
bgpfeeder is (C) Bytemark Hosting 2009, and may be distributed according to
the terms of the GNU General Public License version 3 ONLY.

http://src.bytemark.co.uk/trac/bgpfeeder
